#!/bin/bash
# Script: batchProcessing-0x04
# Purpose: Fetch Pokémon data in parallel with process management and kill if needed

OUTPUT_DIR="pokemon_data_parallel"
mkdir -p "$OUTPUT_DIR"

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
ERROR_FILE="errors_parallel.txt"

# Clear old error log
> "$ERROR_FILE"

# Function to fetch Pokémon data
fetch_pokemon() {
    local pokemon=$1
    local url="https://pokeapi.co/api/v2/pokemon/$pokemon"

    echo "Fetching data for $pokemon..."

    status_code=$(curl -s -o "$OUTPUT_DIR/$pokemon.json" -w "%{http_code}" "$url")

    if [ "$status_code" -eq 200 ]; then
        echo "Saved data to $OUTPUT_DIR/$pokemon.json ✅"
    else
        echo "Error: Failed to fetch data for $pokemon (Status: $status_code)" >> "$ERROR_FILE"
        rm -f "$OUTPUT_DIR/$pokemon.json" # remove bad file
    fi
}

pids=()

# Launch all fetches in parallel and store their PIDs
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)
done

# Wait with process management
for pid in "${pids[@]}"; do
    # Give each process up to 10 seconds to finish
    ( sleep 10 && kill -0 $pid 2>/dev/null && echo "Killing stuck process $pid" && kill $pid ) &
done

# Wait for all fetch jobs to finish
wait

echo "All parallel fetch operations completed."
